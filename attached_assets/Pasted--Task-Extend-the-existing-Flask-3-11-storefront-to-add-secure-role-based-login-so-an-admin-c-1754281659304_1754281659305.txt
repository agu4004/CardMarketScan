üí° Task
Extend the existing Flask 3.11 storefront to add secure, role-based login so an **admin** can create / update / delete card records while regular **users** can only view them.

üéØ Functional Specs
1. **Auth layer**
   ‚Ä¢ Integrate `Flask-Login` for session-based authentication.  
   ‚Ä¢ Keep an in-memory `USERS` dict shaped like `{username: {'password_hash': ..., 'role': 'admin'|'user'}}`.  
   ‚Ä¢ Hash passwords with `werkzeug.security.generate_password_hash`.  
   ‚Ä¢ Store two Replit Secrets: `ADMIN_USERNAME`, `ADMIN_PASSWORD`.  
2. **Roles & permissions**
   ‚Ä¢ Implement `@admin_required` decorator that wraps `@login_required` and checks `current_user.role == "admin"`.  
   ‚Ä¢ Public routes: `GET /`, `GET /cards`, `GET /cards/<id>`.  
   ‚Ä¢ Admin-only routes: `POST /cards`, `PUT /cards/<id>`, `DELETE /cards/<id>`, `GET /admin`.  
3. **Data layer**
   ‚Ä¢ Keep the existing in-memory `CARDS` dict (`{id: {...}}`).  
   ‚Ä¢ Add import/export helpers using Python‚Äôs built-in `csv` module for bulk management.  
4. **UI**
   ‚Ä¢ Render with Jinja2 templates that already use Bootstrap 5‚Äîadd a dark-mode toggle via `data-bs-theme="dark"`.  
   ‚Ä¢ Show ‚ÄúAdd / Edit / Delete‚Äù buttons only when `current_user.role == "admin"`.  
   ‚Ä¢ Include Font Awesome 6 icons for edit/trash.  
5. **Cart sessions**
   ‚Ä¢ Reuse `session['cart']` pattern for the existing cart; ensure cart survives login/logout.  
6. **App structure**
   ‚Ä¢ Follow your modular blueprint (`routes/`, `storage.py`, `config.py`).  
   ‚Ä¢ Production entrypoint: `gunicorn -w 1 -b 0.0.0.0:3000 app:app`.  
7. **README additions**
   ‚Ä¢ How to set secrets in Replit, start the dev server (`flask run --reload`), and run the acceptance tests below.

üöÄ Acceptance Test
1. Visit `/` as a guest ‚Üí see cards, no admin buttons.  
2. Register normal user ‚Üí login ‚Üí still no admin buttons; POST to `/cards` returns **403**.  
3. Login with `ADMIN_USERNAME`/`ADMIN_PASSWORD` ‚Üí `/admin` dashboard loads and CRUD routes return **200**.  
4. Add a card, export CSV, wipe memory, re-import CSV ‚Üí data restored.

üîß Technical Hints
* `Flask-Login` handles session cookies and `current_user` context.  
* Wrap CSV helpers around `csv.DictReader/DictWriter`.  
* Use `flash()` + Bootstrap alerts for feedback messages.  
* Guard in-memory dict with `threading.Lock` if you enable multiple Gunicorn workers later.
